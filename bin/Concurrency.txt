1. mutexes
Simply a locking variable, like binary or boolean to lock the critical section.

private static readonly Object instanceLock = new Object();
private static MySingleton instance;

public static MySingleton getInstance()
{
    lock(instanceLock)
    {
        if(instance == null)
        {
            instance = new MySingleton();
        }
        return instance;
    }
}

The lock statement using the private lock object creates a critical section. 
Requiring each thread to wait until the previous is finished. 
The first thread will enter the section and initialize the instance. 
The second thread will wait, get into the section, and get the initialized instance.
Any sort of synchronization of a static member may use the lock statement similarly.

2. semaphores

Semaphore is signaling mechanism, and it is a generalized mutex.

In java concurrency API, we can compare this,

Semaphores ¨C Restrict the number of threads that can access a resource. Example, limit max 10 connections to access a file simultaneously.
Mutex ¨C Only one thread to access a resource at once. Example, when a client is accessing a file, no one else should have access the same file at the same time.


Mutex example in Java,

package com.webbertech.leetcode.language;

import java.util.concurrent.Semaphore;

/*
 * Mutex is the locking variable and protect the critical section
 * 
 * */

public class MutexTest {

	// max 1 people
	static Semaphore semaphore = new Semaphore(1);

	static class MyLockerThread extends Thread {

		String name = "";

		MyLockerThread(String name) {
			this.name = name;
		}

		public void run() {

			try {
				System.out.println(name + " : acquiring lock...");
				System.out.println(name + " : available Semaphore permits now: " + semaphore.availablePermits());
				semaphore.acquire();
				System.out.println(name + " : got the permit!");
				try {
					for (int i = 1; i <= 5; i++) {

						System.out.println(name + " : is performing operation " + i + ", available Semaphore permits : "
								+ semaphore.availablePermits());

						// sleep 1 second
						Thread.sleep(1000);
					}
				} finally {
					// calling release() after a successful acquire()
					System.out.println(name + " : releasing lock...");
					semaphore.release();
					System.out.println(name + " : available Semaphore permits now: " + semaphore.availablePermits());
				}
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}

	public static void main(String[] args) {
		System.out.println("Total available Semaphore permits : " + semaphore.availablePermits());
		MyLockerThread t1 = new MyLockerThread("A");
		t1.start();
		MyLockerThread t2 = new MyLockerThread("B");
		t2.start();
		MyLockerThread t3 = new MyLockerThread("C");
		t3.start();
		MyLockerThread t4 = new MyLockerThread("D");
		t4.start();
		MyLockerThread t5 = new MyLockerThread("E");
		t5.start();
		MyLockerThread t6 = new MyLockerThread("F");
		t6.start();
	}
}

Questions

1/  What are events?
The semantics of mutex, semaphore, event, critical section, etc¡­ are same. 
All are synchronization primitives. Based on their cost in using them they are different. 
We should consult the OS documentation for exact details.

2/ What is a mutex and critical section?
Some operating systems use the same word critical section in the API. 
Usually a mutex is costly operation due to protection protocols associated with it. 
At last, the objective of mutex is atomic access. There are other ways to achieve atomic access like disabling interrupts 
which can be much faster but ruins responsiveness. The alternate API makes use of disabling interrupts.

3. monitors

Monitors is a mechanism to group some instructions to claim that this region is protected and only 
one thread can access it at a time. In java it is implemented by 'synchronized' block or method.

In the Java virtual machine, every object and class is logically associated with a monitor. To implement the mutual exclusion capability of monitors, a lock (sometimes called a mutex) is associated with each object and class. This is called a semaphore in operating systems books, mutex is a binary semaphore.

If one thread owns a lock on some data, then no others can obtain that lock until the thread that owns the lock releases it. It would be not convenient if we need to write a semaphore all the time when we do multi-threading programming. Luckily, we don't need to since JVM does that for us automatically.

To claim a monitor region which means data not accessible by more than one thread, Java provide synchronized statements and synchronized methods. Once the code is embedded with synchronized keyword, it is a monitor region. The locks are implemented in the background automatically by JVM

We know that each object/class is associated with a Monitor. I think it is good to say that each object has a monitor, since each object could have its own critical section, and capable of monitoring the thread sequence.

To enable collaboration of different threads, Java provide wait() and notify() to suspend a thread and to wake up another thread that are waiting on the object respectively. In addition, there are 3 other versions:

wait(long timeout, int nanos)
wait(long timeout) notified by other threads or notified by timeout. 
notify(all)

Those methods can only be invoked within a synchronized statement or synchronized method. The reason is that if a method does not require mutual exclusion, there is no need to monitor or collaborate between threads, every thread can access that method freely. 

Examples in java about monitor

synchronized keyword is used for exclusive accessing.
To make a method synchronized, simply add the synchronized keyword to its declaration. Then no two invocations of synchronized methods on the same object can interleave with each other.
Synchronized statements must specify the object that provides the intrinsic lock. When synchronized(this) is used, you have to avoid to synchronizing invocations of other objects' methods.
wait() tells the calling thread to give up the monitor and go to sleep until some other thread 
enters the same monitor and calls notify( ).
notify() wakes up the first thread that called wait() on the same object.

Example1

public class ThreadA {
    public static void main(String[] args){
        ThreadB b = new ThreadB();
        b.start();
 
        synchronized(b){
            try{
                System.out.println("Waiting for b to complete...");
                b.wait();
            }catch(InterruptedException e){
                e.printStackTrace();
            }
 
            System.out.println("Total is: " + b.total);
        }
    }
}
 
class ThreadB extends Thread{
    int total;
    @Override
    public void run(){
        synchronized(this){
            for(int i=0; i<100 ; i++){
                total += i;
            }
            notify();
        }
    }
}
 
In the example above, an object, b, is synchronized. b completes the calculation before Main thread outputs its total value.

Output:

Waiting for b to complete...
Total is: 4950
 
 
4. Modern concurrent constructs

5. SpinLock

In software engineering, a spinlock is a lock which causes a thread trying to acquire it to simply wait in a loop ("spin") 
while repeatedly checking if the lock is available. Since the thread remains active but is not performing a useful task, 
the use of such a lock is a kind of busy waiting. Once acquired, spinlocks will usually be held until they are explicitly 
released, although in some implementations they may be automatically released if the thread being waited on (that which holds 
the lock) blocks, or "goes to sleep".

Because they avoid overhead from operating system process rescheduling or context switching, spinlocks are efficient if threads are
likely to be blocked for only short periods. For this reason, operating-system kernels often use spinlocks. However, spinlocks become 
wasteful if held for longer durations, as they may prevent other threads from running and require rescheduling. The longer a thread holds
a lock, the greater the risk that the thread will be interrupted by the OS scheduler while holding the lock. If this happens, other threads 
will be left "spinning" (repeatedly trying to acquire the lock), while the thread holding the lock is not making progress towards releasing it. 
The result is an indefinite postponement until the thread holding the lock can finish and release it. This is especially true on a single-processor 
system, where each waiting thread of the same priority is likely to waste its quantum (allocated time where a thread can run) 
spinning until the thread that holds the lock is finally finished.

Implementing spin locks correctly offers challenges because programmers must take into account the possibility of simultaneous access to the lock, 
which could cause race conditions. Generally, such implementation is possible only with special assembly-language instructions, such as atomic test-and-set operations, 
and cannot be easily implemented in programming languages not supporting truly atomic operations.[1] On architectures without such operations, or if high-level language 
implementation is required, a non-atomic locking algorithm may be used, e.g. Peterson's algorithm. But note that such an implementation may require more memory than a spinlock, 
be slower to allow progress after unlocking, and may not be implementable in a high-level language if out-of-order execution is allowed.


; Intel syntax 80386

locked:                      ; The lock variable. 1 = locked, 0 = unlocked.
     dd      0

spin_lock:
     mov     eax, 1          ; Set the EAX register to 1.

     xchg    eax, [locked]   ; Atomically swap the EAX register with
                             ;  the lock variable.
                             ; This will always store 1 to the lock, leaving
                             ;  the previous value in the EAX register.

     test    eax, eax        ; Test EAX with itself. Among other things, this will
                             ;  set the processor's Zero Flag if EAX is 0.
                             ; If EAX is 0, then the lock was unlocked and
                             ;  we just locked it.
                             ; Otherwise, EAX is 1 and we didn't acquire the lock.

     jnz     spin_lock       ; Jump back to the MOV instruction if the Zero Flag is
                             ;  not set; the lock was previously locked, and so
                             ; we need to spin until it becomes unlocked.

     ret                     ; The lock has been acquired, return to the calling
                             ;  function.

spin_unlock:
     mov     eax, 0          ; Set the EAX register to 0.

     xchg    eax, [locked]   ; Atomically swap the EAX register with
                             ;  the lock variable.

     ret                     ; The lock has been released.

Questions:

Which of the following is the fastest and which is slowest?

1/ write to cpu register
2/ context switching
3/ write to disk
4/ write to main memory

so the order should be 1,2,4,3


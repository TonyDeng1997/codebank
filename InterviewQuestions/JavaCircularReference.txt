Circular reference

1. Misconception

circular reference is about 'object.b.a = object',
not circular calling like the following,

class a
{
    b b1;
    a( )
    {
        b1=new b();
    }
}
 
class b
{
    a a1;
    b( )
    {
        a1=new a();
    }
}
 
public class Main_Class
{
    public static void main(String[] args)
    {
        a obj=new a();
        obj=null;   // inaccessible circular references now exists
    }
}

2. Example of circular reference

class A {
    private B b;
     
    public void setB(B b) {
        this.b = b;
    }
}
 
class B {
    private A a;
     
    public void setA(A a) {
        this.a = a;
    }
}
 
public class Main {
    public static void main(String[] args) {
        A one = new A();
        B two = new B();
 
        // Make the objects refer to each other (creates a circular reference)
        one.setB(two);
        two.setA(one);
 
        // Throw away the references from the main method; the two objects are
        // still referring to each other
        one = null;
        two = null;
    }
}

Why need to prevent circular?

 167
down vote
accepted
	

There are a great many things wrong with circular references:

    Circular class references create high coupling; both classes must be recompiled every time either of them is changed.

    Circular assembly references prevent static linking, because B depends on A but A cannot be assembled until B is complete.

    Circular object references can crash na√Øve recursive algorithms (such as serializers, visitors and pretty-printers) with stack overflows. The more advanced algorithms will have cycle detection and will merely fail with a more descriptive exception/error message.

    Circular object references also make dependency injection impossible, significantly reducing the testability of your system.

    Objects with a very large number of circular references are often God Objects. Even if they are not, they have a tendency to lead to Spaghetti Code.

    Circular entity references (especially in databases, but also in domain models) prevent the use of non-nullability constraints, which may eventually lead to data corruption or at least inconsistency.

    Circular references in general are simply confusing and drastically increase the cognitive load when attempting to understand how a program functions.

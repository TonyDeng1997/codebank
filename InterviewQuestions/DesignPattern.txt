// factory, adapter, bridge, visitor, command, proxy, observer, etc

Singleton
The idea is to avoid double check singleton implementation. Please 
get more reference on that. 

class Singleton {
	private static Singleton instance;
	private Singleton() {}
	
	public static Singleton getInstance() {
	    if (instance == null) {
	    	return new Singleton();
	    }
	} 
}


Factory Pattern

So basically there is a factory class and with argument passed in to get the
the intended object. 

eg:
	public class ShapeFactory {
	   //use getShape method to get object of type shape 
	   public Shape getShape(String shapeType){
	      if(shapeType == null){
	         return null;
	      }		
	      if(shapeType.equalsIgnoreCase("CIRCLE")){
	         return new Circle();
	         
	      } else if(shapeType.equalsIgnoreCase("RECTANGLE")){
	         return new Rectangle();
	         
	      } else if(shapeType.equalsIgnoreCase("SQUARE")){
	         return new Square();
	      }
	      return null;
	   }
	}
	
	
Adapter Pattern, 
	
So adapter usually comes in the form of interface or abstract class.
Adapter design pattern is one of the structural design pattern and 
its used so that two unrelated interfaces can work together. 
The object that joins these unrelated interface is called an Adapter.


public class Volt {

	private int volts;
	
	public Volt(int v){
		this.volts=v;
	}

	public int getVolts() {
		return volts;
	}

	public void setVolts(int volts) {
		this.volts = volts;
	}
	
}

public class Socket {

	public Volt getVolt(){
		return new Volt(120);
	}
}

Now we want to build an adapter that can produce 3 volts, 12 volts and default 120 volts. So first of all we will create an adapter interface with these methods.

package com.journaldev.design.adapter;

public interface SocketAdapter {

	public Volt get120Volt();
		
	public Volt get12Volt();
	
	public Volt get3Volt();
}

Class Adapter
//Using inheritance for adapter pattern
public class SocketClassAdapterImpl extends Socket implements SocketAdapter{

	@Override
	public Volt get120Volt() {
		return getVolt();
	}

	@Override
	public Volt get12Volt() {
		Volt v= getVolt();
		return convertVolt(v,10);
	}

	@Override
	public Volt get3Volt() {
		Volt v= getVolt();
		return convertVolt(v,40);
	}
	
	private Volt convertVolt(Volt v, int i) {
		return new Volt(v.getVolts()/i);
	}

}

Object Adapter Implementation

public class SocketObjectAdapterImpl implements SocketAdapter{

	//Using Composition for adapter pattern
	private Socket sock = new Socket();
	
	@Override
	public Volt get120Volt() {
		return sock.getVolt();
	}

	@Override
	public Volt get12Volt() {
		Volt v= sock.getVolt();
		return convertVolt(v,10);
	}

	@Override
	public Volt get3Volt() {
		Volt v= sock.getVolt();
		return convertVolt(v,40);
	}
	
	private Volt convertVolt(Volt v, int i) {
		return new Volt(v.getVolts()/i);
	}
}


While implementing Adapter pattern, there are two approaches 每 class adapter and object adapter 每 however both these approaches produce same result.

Class Adapter 每 This form uses java inheritance and extends the source interface, in our case Socket class.
Object Adapter 每 This form uses Java Composition and adapter contains the source object.
    	
Cons:
Some say that the Adapter pattern is just a fix for a badly designed system, 
which didn't consider all possibilties. While this is a fair point, it is an 
important part of a pluggable architecture.  It can also add a level of complexity
 to your code, making debugging more difficult.
    	

Visitor Pattern, 
This pattern comes under behavior pattern category. 
As per the pattern, element object has to accept the visitor object so that visitor 
object handles the operation on the element object. 

For instance, it creates an interface and declare a group of 
same method but they reply on different input of class to behave differently.

public interface ComputerPartVisitor {
	public void visit(Computer computer);
	public void visit(Mouse mouse);
	public void visit(Keyboard keyboard);
	public void visit(Monitor monitor);
}	 


Command Pattern, 
Command pattern is a data driven design pattern and falls under 
behavioral pattern category.
Command pattern is usually an interface, for example the following
order is a command interface.

public interface Order {
   void execute();
}

stock class is an entity class which has two actions.

public class Stock {
	
   private String name = "ABC";
   private int quantity = 10;

   public void buy(){
      System.out.println("Stock [ Name: "+name+", 
         Quantity: " + quantity +" ] bought");
   }
   public void sell(){
      System.out.println("Stock [ Name: "+name+", 
         Quantity: " + quantity +" ] sold");
   }
}

Buy stock implements execute() by calling one action from stock.

public class BuyStock implements Order {
   private Stock abcStock;

   public BuyStock(Stock abcStock){
      this.abcStock = abcStock;
   }

   public void execute() {
      abcStock.buy();
   }
}

Same thing for sell action.

public class SellStock implements Order {
   private Stock abcStock;

   public SellStock(Stock abcStock){
      this.abcStock = abcStock;
   }

   public void execute() {
      abcStock.sell();
   }
}

Broker class collects a list of Orders which uses command interface to 
get action objects of BuyStock or SellStocks,

  public class Broker {
   private List<Order> orderList = new ArrayList<Order>(); 

   public void takeOrder(Order order){
      orderList.add(order);		
   }

   public void placeOrders(){
   
      for (Order order : orderList) {
         order.execute();
      }
      orderList.clear();
   }
}


Then for each action class, its execute() is different behavior.
This pattern greatly utilized interface. 


Proxy Pattern, 
In proxy pattern, a class represents functionality of another class. 
This type of design pattern comes under structural pattern. To summerize it,
it is like a wrapper class of another.

public interface Image {
   void display();
}

public class RealImage implements Image {

   private String fileName;

   public RealImage(String fileName){
      this.fileName = fileName;
      loadFromDisk(fileName);
   }

   @Override
   public void display() {
      System.out.println("Displaying " + fileName);
   }

   private void loadFromDisk(String fileName){
      System.out.println("Loading " + fileName);
   }
}

public class ProxyImage implements Image{

   private RealImage realImage;
   private String fileName;

   public ProxyImage(String fileName){
      this.fileName = fileName;
   }

   @Override
   public void display() {
      if(realImage == null){
         realImage = new RealImage(fileName);
      }
      realImage.display();
   }
}

Use the ProxyImage to get object of RealImage class when required.

ProxyPatternDemo.java

public class ProxyPatternDemo {
	
   public static void main(String[] args) {
      Image image = new ProxyImage("test_10mb.jpg");

      //image will be loaded from disk
      image.display(); 
      System.out.println("");
      
      //image will not be loaded from disk
      image.display(); 	
   }
}


Bridge Pattern, 

This pattern involves an interface which acts as a bridge which makes 
the functionality of concrete classes independent from interface implementer classes. 
Both types of classes can be altered structurally without affecting each other.
	
(******)	
	
	
Observer Pattern,
Observer pattern is used when there is one-to-many relationship between objects 
such as if one object is modified, its depenedent objects are to be notified automatically. 
Observer pattern falls under behavioral pattern category.
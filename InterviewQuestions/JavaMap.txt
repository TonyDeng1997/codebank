Map,

1. map.put(new User("FirstName, "LastName"), 1),
   map.get(new User("FirstName, "LastName"), 1),
 
 map uses object as key, it will use the hashCode() as the key.
 For the class implementation,the default implementation, for different object, when you 
 new a new object, the hashCode() are different, thus, you will get a null.
 
 Now to remedy that, you will need to reimplement hashCode() method as well as the equals() method.
 However, the problem is that it will depend on the string info hash code of the field. So a good
 hash algorithm should be considered to eliminate the collisions.
 
2. Iterate Map
    Map.Entry<Key, Value> entry = map.getEntrySet();
    entry.getKey();
    entry.getValue();
    
3. map.get(key) , map.put(key,value)
4. map.remove(key).

5. Queue<T>, ArrayDeque<T>
ArrayDeque is a double head queue. 
The important methods are offer(data) and poll()(*pull the head element*);


6. HashMap vs HashTable

There are several differences between HashMap and Hashtable in Java:
1/ Hashtable is synchronized, whereas HashMap is not. This makes HashMap better for non-threaded applications, as unsynchronized Objects typically perform better than synchronized ones.
2/ Hashtable does not allow null keys or values. HashMap allows one null key and any number of null values.
3/ One of HashMap's subclasses is LinkedHashMap, so in the event that you'd want predictable iteration order (which is insertion order by default), you could easily swap out the HashMap for a LinkedHashMap. This wouldn't be as easy if you were using Hashtable.
4/ Since synchronization is not an issue for you, I'd recommend HashMap. 
If synchronization becomes an issue, you may also look at ConcurrentHashMap.


1. Given an integer array, construct a bst, 
   and given two nodes with value n1 and n2
   return the distance between n1 and n2. If n1, or n2 is not in the tree,
   return -1. See implementation in my tree package.
   
2. Validate parenthesis. 
   Including (),<>, {},[].
   
3. Moving rating ranking. Get the Kth largest movie. 

4. Onsite, June 16th, 2017

1/ Design questions: saying you are a client, and you want to order a taxi, how do you design it?

2/ Coding questions: t9, saying you have a old phone with certain keys,
2, abc
3, def
4, ghi
5, jkm,...

Given a word, check if it is in a dictionary. 
boolean get(String word) get it in O(1).
So need to build a hashmap with map<Integer, ArrayList<Character>> for the keyboard.
need to build a dictionary for bob, cat, ...etc. 

Say input is 228, then how many words can be formed by 228, and check them in the dictionary.

get("228") is it in the dictionary?

Talk about building dictionary, but using a trie. Also build a map<Key, String>,

talking about the map, first we have a list of words, then we can build the key out of its number 
by looking up the in the keyPad map.

<283, cat>,
<151, bob>,

then get("283") will look it up in the map.

Continue the study of trie.

3/ Given an unsorted array and return start and end index of the subarray where it is sorted
and this whole array is sorted.
Solution: First need to ask what to return (good.)
          Need to ask can I assume it is in accending order. (good).
          
a/ If we assume it is in accending order, then starting from index i=1, and compare with i-1,
 and see if i is less than i-1, if so, then set start= i-1. 
b/ Once this is done, reverse the whole array.
c/ If the array is reversed, ideally it is in decreasing order, then use the same way to find the first 
i that is i is greater than i-1, then end = i-1.

return start and end in a list.

4/ LRU cache
LRU has a window size. Assuming that there is a sequence of page number coming.

Talked about two solutions,

insert(int n), replace the least used one.
get(int n), it will get the number to put in the front of the queue.

1/ use priority queue.
2/ use map, <integer, node>

continue checking on this.

 
 
  
 
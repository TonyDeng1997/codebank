Process

Each process provides the resources needed to execute a program. 
A process has a virtual address space, executable code, open handles to system objects, 
a security context, a unique process identifier, environment variables, 
a priority class, minimum and maximum working set sizes, and at least one thread of execution. 

Each process is started with a single thread, often called the primary thread, but can create additional threads 
from any of its threads.

Thread

A thread is an entity within a process that can be scheduled for execution. 
All threads of a process share its virtual address space and system resources. 
In addition, each thread maintains exception handlers, a scheduling priority, 
thread local storage, a unique thread identifier, and a set of structures the system will 
use to save the thread context until it is scheduled. The thread context includes the thread's set of machine registers, 
the kernel stack, a thread environment block, and a user stack in the address space of the thread's process. 
Threads can also have their own security context, which can be used for impersonating clients.

The major differences between threads and processes are:

Threads share the address space of the process that created it; 
Processes have their own address space.
Threads have direct access to the data segment of its process; 
Processes have their own copy of the data segment of the parent process.
Threads can directly communicate with other threads of its process; 
Processes must use interprocess communication to communicate with sibling processes.
Threads have almost no overhead; processes have considerable overhead.
New threads are easily created; new processes require duplication of the parent process.
Threads can exercise considerable control over threads of the same process; 
Processes can only exercise control over child processes.
Changes to the main thread (cancellation, priority change, etc.) may affect the behavior of the other threads of the process; 
Changes to the parent process do not affect child processes.

